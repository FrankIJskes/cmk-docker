#!/usr/bin/python
# -*- encoding: utf-8; -*-
# Author: Frank IJskes for RWS
# version 1.5
# Added filtering for stopped containers. Puased containers are not done yet. I have no need for that now.

#FILTER_STOPPED_CONTAINERS=['ivs-vpo-mule-migr','siam-oc-db-migr','ivs-rla-db-migr','ivs-infra-mule-migr','ivs-vwn-db-migr','ivs-cad-db-migr','ivs-sbp-db-migr','nlrdms-data','nlhull-data']
FILTER_STOPPED_CONTAINERS=['ivs-vpo-mule-migr','siam-oc-db-migr','ivs-rla-db-migr','ivs-infra-mule-migr','ivs-vwn-db-migr','ivs-cad-db-migr','ivs-sbp-db-migr']
FILTER_PAUSED_CONTAINERS=['']
FILTER_CREATED_CONTAINERS=['nlrdms-data','nlhull-data']
#FILTER_CREATED_CONTAINERS=['']

# Some containers are ok to be stopped/paused. These are defined in the global variables
def count_containers(info, state, FILTER):
    """
    info is what is passed to these tests, ie the full output of the bash script
    state is the "status" value in the docker ps -a that we want to count
    FILTER is the filter to be used for these tests
    """
    # how to determine what the output is of the docker ps -a?
    # the line starts with "CONTAINER"
    i=0
    containers_found=[]
    containers_filtered=[]
    parse=False # when to start parsing
    for line in info:
        #print "PARSING LINE:", line
        if "CONTAINER" in line[0]:
            parse=True
            continue
        if parse:# we found the line that contains CONTAINER, therefor start PARSING
            # scan the lines for containers that have the "state" we want to check
            ##print "checking line",line
            if state in line:
                found=False
                # verify that we do not filter this specific line
                for f in FILTER:
                    if f in line[1]:
                        containers_filtered.append(line[1])
                        found=True
                        break
                if found==False:
                    # If not in filter, then append the full name of the container
                    containers_found.append(line[1])
            ##print "containers_found=", containers_found,"filtered=", containers_filtered

    # return dictionary of containers that are not filtered, nr of containers that are not filtered, dict of filtered containers, nr of containers filtered
    ##print "found:",containers_found,' filtered:',containers_filtered, "filter:", FILTER
    return containers_found, len(containers_found),containers_filtered, len(containers_filtered)

# the inventory function, return something/anything really
def inventory_docker_info(info):
    inventory = [( None, {} )]

    return inventory


def normal_value(val,unit="B"):
    # input is anything like 5.1 MB or 2 GB
    # return value is in Bytes

    m=1
    step=('B', 'kB', 'MB', 'GB')
    for s in step:
        if s == unit:
            break
        m=m*1024

    z=float(m * float(val))
    # The following should not happen, but we want some data...
    if z <=0:
        z=0.1
    return float(z)

# the check function
# return of multi value:
# 0 Nagios_Status ok=33012|crit=17|warn=120|unkw=16 Services ok/cr/wa/un: 33012/17/120/16
# als storage_driver = devicemapper, dan data space(used/total/available) en meta data space (used/total/available)
def check_docker_info(item, params, info):
    add_info=""
    full_info=False
    nr_containers=0
    containers_paused=0
    containers_stopped=0

    error=0

    # tresholds for warnings about number of containers either stopped or paused after being filtered
    cont_warning=1
    cont_critical=4
    # tresholds of maximum filtered containers
    cont_filtered_warning=4
    cont_filtered_critical=6

    perfdata=[]

    # check if there is devicemapper storage used.
    for line in info:
        if "devicemapper" in line:
            full_info=True
            break

    # only devicemapper storage_driver has info about
    if full_info:
        data_space_used=0
        data_space_total=0
        data_space_avail=0
        metadata_space_used=0
        metadata_space_total=0
        metadata_space_avail=0
        # tresholds for wich we want to be notified about dataspase or metadataspace
    	data_used_warning=87
    	data_used_critical=92

        for line in info:
            if "Data" in line and "Space" in line:
                Unit=line[-1]
                Val=line[-2]
                if "Used:" in line:
                    data_space_used=normal_value( Val,Unit)
                if "Total:" in line:
                    data_space_total=normal_value( Val,Unit)
                if "Available:" in line:
                    data_space_avail=normal_value( Val,Unit)
            if "Metadata" in line and "Space" in line:
                if "Used:" in line:
                    metadata_space_used=normal_value(line[-2],line[-1])
                if "Total:" in line:
                    metadata_space_total=normal_value(line[-2],line[-1])
                if "Available:" in line:
                    metadata_space_avail=normal_value(line[-2],line[-1])

        # treshold bepaling.. (metadata en data).
        # calculate percentage
        percD=float( data_space_used*100 / data_space_total)
        if percD >= data_used_warning:
            add_info=add_info+" DataSpaceUsed:"+str(round(percD,1))+"%"
            if percD >= data_used_critical:
                error=max(error,2)
            else:
                error=max(error,1)
        pD=('DataSpaceUsed',int(percD),data_used_warning,data_used_critical)
        perfdata.append(pD)

        percM=float(metadata_space_used*100 / metadata_space_total)
        if percM >= data_used_warning:
            add_info=add_info+"  MetaDataSpaceUsed:"+str(round(percM,1))+"%"
            if percM >= data_used_critical:
                error=max(error,2)
            else:
                error=max(error,1)
        pM=('MetadataSpaceUsed',int(percM),data_used_warning,data_used_critical)
        perfdata.append(pM)


    # container checks. Older versions do not report running/paused/stopped this information.
    for line in info:
        if "Containers:" in line:
            nr_containers=line[-1]
        if "Paused:" in line:
            containers_paused=line[-1]
        if "Stopped:" in line:
            containers_stopped=line[-1]

    # Containers tresholds
    if int(containers_paused) >= cont_warning:
        add_info=add_info+"  Paused containers:"+str(containers_paused)
        error=max(error,1)
        if int(containers_paused) >= cont_critical:
            error=max(error,2)

    if int(containers_stopped) >= cont_warning:
        cc,ccl,fc,fcl=count_containers(info, "Exited", FILTER_STOPPED_CONTAINERS)
        cCreated,cCreatedl,fCreated,fCreatedl=count_containers(info, "Created", FILTER_CREATED_CONTAINERS)

        add_info=add_info+" Stopped containers="+str(containers_stopped)+" <Stopped="+str(cc)+" Filtered="+str(fc)+">"

        if cCreatedl or fCreatedl:
            add_info=add_info+" <Created="+str(cCreated)+" Filtered="+str(fCreated)+">"
            if cCreatedl>0:
                error=max(error,1)
            else:
                if ccl==0 and fcl==0 and fCreatedl==0: # this is a situation that is not supposed to happen...
                    error=max(error,2)


        # if nr of stopped containers after filtering is still too much
        if ccl>=cont_warning:
            # also show list of stopped containers
            # add_info=add_info+"*"+str(cc)+"*"
            error=max(error,1)
            if ccl >= cont_critical:
                error=max(error,2)

        # Now add info about filtered containers
        if fcl:
            add_info=add_info+"<Filtered="+str(fcl)+"-"+str(fc)+">"

        # if number of filtered containers is still too much
        if fcl>=cont_filtered_warning:
            error=max(error,1)
            if fcl>=cont_filtered_critical:
                error=max(error,2)

    pCP=('ContainersPaused',int(containers_paused),0,0)
    pCS=('ContainersStopped',int(containers_stopped),0,0)

    perfdata.append(pCP)
    perfdata.append(pCS)
    if error==0:
        result="Docker info: "+ add_info
    else:
        result = "Docker info ="+ add_info
    yield [error, result, perfdata ]
    #return STATE infotext PERFDATA
    # format PERFDATA -> [( name , value , name , value)

# declare the check to Check_MK
check_info["docker_info"] = {
    "check_function"          : check_docker_info,
    "inventory_function"      : inventory_docker_info,
    "service_description"     : 'Docker - Info',
    "has_perfdata"            : True,
}
