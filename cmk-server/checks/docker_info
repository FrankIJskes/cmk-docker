#!/usr/bin/python
# -*- encoding: utf-8; -*-
# Als je een perf-o-meter wilt, kijk dan op: https://mathias-kettner.de/checkmk_devel_perfometer.html

# the inventory function, return something/anything really
def inventory_docker_info(info):
    inventory = [( None, {} )]

    return inventory


def normal_value(val,unit="B"):
    # input is anything like 5.1 MB or 2 GB
    # return value is in Bytes
    #verwijder de . in de string

    m=1
    step=('B', 'kB', 'MB', 'GB')
    for s in step:
        if s == unit:
            break
        m=m*1024

    z=float(m * float(val))
    if z <=0:
        z=0.1
    return float(z)

# the check function
# return of multi value:
# 0 Nagios_Status ok=33012|crit=17|warn=120|unkw=16 Services ok/cr/wa/un: 33012/17/120/16
# zou willen: containers: / containers-stopped / containers-paused
# images: geeft geen interessante info, enkel aantal images ooit aanwezig geweest. Niet interessant
# als storage_driver = devicemapper, dan data space(used/total/available) en meta data space (used/total/available)
def check_docker_info(item, params, info):
    full_info=False
    nr_containers=0
    containers_paused=0
    containers_stopped=0

    error=0
    cont_warning=2
    cont_critical=4

    perfdata=[]

    for line in info:
        if "devicemapper" in line:
            full_info=True
            break

    # only devicemapper storage_driver has info about
    if full_info:
        data_space_used=0
        data_space_total=0
        data_space_avail=0
        metadata_space_used=0
        metadata_space_total=0
        metadata_space_avail=0
    	data_used_warning=87
    	data_used_critical=92

        for line in info:
            if "Data" in line and "Space" in line:
                Unit=line[-1]
                Val=line[-2]
                if "Used:" in line:
                    data_space_used=normal_value( Val,Unit)
                if "Total:" in line:
                    data_space_total=normal_value( Val,Unit)
                if "Available:" in line:
                    data_space_avail=normal_value( Val,Unit)
            if "Metadata" in line and "Space" in line:
                if "Used:" in line:
                    metadata_space_used=normal_value(line[-2],line[-1])
                if "Total:" in line:
                    metadata_space_total=normal_value(line[-2],line[-1])
                if "Available:" in line:
                    metadata_space_avail=normal_value(line[-2],line[-1])

        # treshold bepaling.. (metadata en data).
        # calculate percentage
        percD=float( data_space_used*100 / data_space_total)
        if percD > data_used_warning:
            if percD > data_used_critical:
                error=max(error,2)
            else:
                error=max(error,1)
        pD=('DataSpaceUsed',int(percD),data_used_warning,data_used_critical)
        perfdata.append(pD)

        percM=float(metadata_space_used*100 / metadata_space_total)
        if percM > data_used_warning:
            if percM > data_used_critical:
                error=max(error,2)
            else:
                error=max(error,1)
        pM=('MetadataSpaceUsed',int(percM),data_used_warning,data_used_critical)
        perfdata.append(pM)
        #A=A+str(pM)+str(pD)

    # container checks. Older versions do not report running/paused/stopped this information.
    for line in info:
        if "Containers" in line:
            nr_containers=line.split(":")[1].strip()
        if " Paused" in line:
            containers_paused=line.split(":")[1].strip()
        if " Stopped" in line:
            containers_stopped=line.split(":")[1].strip()
    # Containers tresholds
    if int(containers_paused) > cont_warning:
        error=max(error,1)
        if int(containers_paused) > cont_critical:
            error=max(error,2)
    if int(containers_stopped) > cont_warning:
        error=max(error,1)
        if int(containers_stopped) > cont_critical:
            error=max(error,2)

    pCP=('ContainersPaused',int(containers_paused),0,0)
    pCS=('ContainersStopped',int(containers_stopped),0,0)

    perfdata.append(pCP)
    perfdata.append(pCS)
    result = "Docker info"
    yield [error, result, perfdata ]
    #return STATE infotext PERFDATA
    # format PERFDATA -> [( name , value , name , value)

# declare the check to Check_MK
check_info["docker_info"] = {
    "check_function"          : check_docker_info,
    "inventory_function"      : inventory_docker_info,
    "service_description"     : 'Docker - Info',
    "has_perfdata"            : True,
}
